import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import React, {useState, useEffect} from 'react'

import Auth from './Components/Auth'
import AdminEmulate from './Components/AdminEmulate'
import Admin from './Components/Admin'
import Client from './Components/Client'
import ClientEmulate from './Components/ClientEmulate'


import {useAuthState} from "react-firebase-hooks/auth"
import { collection, addDoc } from "firebase/firestore"; 


import firebase, {auth, db, provider} from '../firebase/clientApp'
import { useRouter } from 'next/router'
// import firebase, {auth, db, provider} from '../firebase/clientApp'

// import { auth } from '../firebase/clientApp'

const adminId = process.env.NEXT_PUBLIC_FIREBASE_ADMIN_UID


export default function Home() {
  
  // const createCollection = async () => {
  //   try {
  //     const docRef = await addDoc(collection(db, "users"), {
  //       first: "Ada",
  //       last: "Lovelace",
  //       born: 1815
  //     });
  //     console.log("Document written with ID: ", docRef.id);
  //   } catch (e) {
  //     console.error("Error adding document: ", e);
  //   }
  // }
  // // createCollection()
  
  
  const [data, setData] = useState(null)
  const [isLoading, setLoading] = useState(true)
  const [emulation, setEmulation] = useState(null)
  
  
  const [user, userAuthIsLoading, userAuthError] = useAuthState(auth)
  // console.log(user.uid)
  // console.log(user)
  // console.log(`Loading: ${userAuthIsLoading} || Current user: ${user}`)
  // console.log(user)
  
  // useEffect(() => {
  //   setLoading(true)

  //   // fetch('/api/hello').then((res) => res.json() )
  //   //   .then((x) => {
  //   //     setData(x)
  //   //     setLoading(false)
  //   //   })

  //   fetch('/api/hello').then((response) => {
  //     // console.log(...response.headers)
  //     // console.log(response)
  //     response.json().then((x) => {
  //       // console.log(x)
  //       setData(x)
  //       setLoading(false)
  //     })
  //   })

  // }, [])

  const fileUpload = async () => {
    console.log('yes')
    // fetch('/api/handlefiles').then((res) => res.json() )
    //   .then((x) => {
    //     setData(x)
    //     setLoading(false)
    //   })
  }


  return (
    <div className={styles.container}>
      <Head>
        <title>xkTransfer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon"  href="favicon.ico?v=1.1" />
      </Head>
      {
        user ?

        <nav className={styles.nav}>
          {/* {user.displayName}
            _
          {user.email}
          _
          {user.uid} */}
          
          {<Image src={user.photoURL} 
            className={styles.userIcon}
            alt="User Photo" 
            width={'100%'} 
            height={'100%'} />} 
           
        </nav>
        :
        null
      }
      <Auth />

      <main>

          {!user &&
        <section className={styles.indexButtonsContainer}>
          <button className={styles.indexButtons} onClick={() => setEmulation('admin')}>Emulate Admin</button>
          <button className={styles.indexButtons} onClick={() => setEmulation('client')}>Emulate Client</button>
          <button className={styles.indexButtons} onClick={() => setEmulation('')}>Emulate Null</button>
        </section>
          }

        {
          (user 
          &&
          (user.uid == adminId))
          ?
          <Admin />
          :
          user && <Client />
        }
        {/* {
          (user 
          &&
          (user.uid == !adminId))
          &&
          <Client userAuth={user}/>
        } */}
        {
          emulation == 'admin'
          &&
          <AdminEmulate />
        }
        {
          emulation == 'client'
          &&
          <ClientEmulate />
        }

        {/* <Client /> */}


         {/* <AdminEmulate /> */}
         {/* <Admin /> */}
         {/* <ClientEmulate /> */}
        {/* <Client userAuth={user} /> */}

        
      </main>

      <footer className={styles.footer}>
      
        {/* <Auth /> */}
        {/* {user} */}

      </footer>
    </div>
  )
}
